name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Install packages
      run: |
        for pkg in packages/*/; do
          if [ -f "$pkg/pyproject.toml" ]; then
            cd "$pkg" && pip install -e . && cd ../..
          fi
        done

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 packages/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Type check with mypy
      run: |
        pip install mypy
        mypy packages/

    - name: Run tests
      run: |
        pytest packages/*/tests/ -v --cov=packages --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel

    - name: Build packages
      run: |
        for pkg in packages/*/; do
          if [ -f "$pkg/pyproject.toml" ]; then
            echo "Building $pkg..."
            cd "$pkg" && python -m build && cd ../..
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: |
          packages/*/dist/
        retention-days: 30

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r packages/ -f json -o bandit-report.json || true

    - name: Run Safety vulnerability check
      run: |
        safety check --json > safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        # Add documentation build commands here
        echo "Documentation build would go here"

  release:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Create release
      run: |
        echo "Release creation would go here"
        # Add release automation here